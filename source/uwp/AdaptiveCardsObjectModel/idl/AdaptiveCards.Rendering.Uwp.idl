// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
#include <sdkddkver.h>

import "inspectable.idl";
import "Windows.Foundation.idl";
import "Windows.UI.Xaml.idl";
import "Windows.Data.Json.idl";

#define AdaptiveNamespace AdaptiveCards::Rendering::Uwp

namespace AdaptiveCards
{
    namespace Rendering
    {
        namespace Uwp
        {
            runtimeclass AdaptiveCardParseResult;
            runtimeclass AdaptiveHostConfigParseResult;

            [version(NTDDI_WIN10_RS1)] typedef[v1_enum] enum TextSize {
                Small = 0,
                Default,
                Medium,
                Large,
                ExtraLarge
            } TextSize;

            [version(NTDDI_WIN10_RS1)] typedef[v1_enum] enum TextWeight { Lighter = 0, Default, Bolder } TextWeight;

            [version(NTDDI_WIN10_RS1)] typedef[v1_enum] enum ForegroundColor {
                Default = 0,
                Dark,
                Light,
                Accent,
                Good,
                Warning,
                Attention
            } ForegroundColor;

            [version(NTDDI_WIN10_RS1)] typedef[v1_enum] enum HAlignment { Left = 0, Center, Right } HAlignment;

            [version(NTDDI_WIN10_RS1)] typedef[v1_enum] enum VAlignment { Top = 0, Center, Bottom } VAlignment;

            [version(NTDDI_WIN10_RS1)] typedef[v1_enum] enum BackgroundImageFillMode {
                Cover = 0,
                RepeatHorizontally,
                RepeatVertically,
                Repeat
            } BackgroundImageFillMode;

            [version(NTDDI_WIN10_RS1)] typedef[v1_enum] enum ElementType {
                Unsupported = 0,
                AdaptiveCard,
                TextBlock,
                Image,
                Container,
                Column,
                ColumnSet,
                FactSet,
                Fact,
                ImageSet,
                ChoiceInput,
                ChoiceSetInput,
                DateInput,
                NumberInput,
                TextInput,
                TimeInput,
                ToggleInput,
                Custom,
                Media,
                ActionSet,
                RichTextBlock,
            } ElementType;

            [version(NTDDI_WIN10_RS1)] typedef[v1_enum] enum ActionType {
                Unsupported = 0,
                ShowCard,
                Submit,
                OpenUrl,
                ToggleVisibility,
                Execute,
                Custom
            } ActionType;

            [version(NTDDI_WIN10_RS1)] typedef[v1_enum] enum ImageStyle { Default = 0, Person } ImageStyle;

            [version(NTDDI_WIN10_RS1)] typedef[v1_enum] enum ImageSize {
                None = 0,
                Auto,
                Stretch,
                Small,
                Medium,
                Large
            } ImageSize;

            [version(NTDDI_WIN10_RS1)] typedef[v1_enum] enum SeparatorThickness {
                Default = 0,
                Thick,
            } SeparatorThickness;

            [version(NTDDI_WIN10_RS1)] typedef[v1_enum] enum Spacing {
                Default = 0,
                None,
                Small,
                Medium,
                Large,
                ExtraLarge,
                Padding
            } Spacing;

            [version(NTDDI_WIN10_RS1)] typedef[v1_enum] enum ActionsOrientation {
                Vertical = 0,
                Horizontal
            } ActionsOrientation;

            [version(NTDDI_WIN10_RS1)] typedef[v1_enum] enum ActionAlignment {
                Left = 0,
                Center,
                Right,
                Stretch,
            } ActionAlignment;

            [version(NTDDI_WIN10_RS1)] typedef[v1_enum] enum ActionMode { Inline = 0, Popup } ActionMode;

            [version(NTDDI_WIN10_RS1)] typedef[v1_enum] enum ChoiceSetStyle { Compact = 0, Expanded } ChoiceSetStyle;

            [version(NTDDI_WIN10_RS1)] typedef[v1_enum] enum TextInputStyle {
                Text = 0,
                Tel,
                Url,
                Email,
            } TextInputStyle;

            [version(NTDDI_WIN10_RS1)] typedef[v1_enum] enum ContainerStyle {
                None = 0,
                Default,
                Emphasis,
                Good,
                Attention,
                Warning,
                Accent
            } ContainerStyle;

            [version(NTDDI_WIN10_RS1)] typedef[v1_enum] enum FontType { Default = 0, Monospace } FontType;

            [version(NTDDI_WIN10_RS1)] typedef[v1_enum] enum ErrorStatusCode {
                InvalidJson = 0,
                RenderFailed,
                RequiredPropertyMissing,
                InvalidPropertyValue,
                UnsupportedParserOverride,
                CustomError,
            } ErrorStatusCode;

            [version(NTDDI_WIN10_RS1)] typedef[v1_enum] enum WarningStatusCode {
                UnknownElementType = 0,
                UnknownActionElementType,
                UnknownPropertyOnElement,
                UnknownEnumValue,
                NoRendererForType,
                InteractivityNotSupported,
                MaxActionsExceeded,
                AssetLoadFailed,
                UnsupportedSchemaVersion,
                UnsupportedMediaType,
                InvalidMediaMix,
                InvalidValue,
                UnsupportedValue,
                PerformingFallback,
                CustomWarning,
                EmptyLabelInRequiredInput,
                MissingValidationErrorMessage,
                RequiredPropertyMissing
            } WarningStatusCode;

            [version(NTDDI_WIN10_RS1)] typedef[v1_enum] enum VerticalContentAlignment {
                Top = 0,
                Center,
                Bottom
            } VerticalContentAlignment;

            [version(NTDDI_WIN10_RS1)] typedef[v1_enum] enum HeightType { Auto = 0, Stretch } HeightType;

            [version(NTDDI_WIN10_RS1)] typedef[v1_enum] enum IsVisible {
                IsVisibleToggle = 0,
                IsVisibleTrue,
                IsVisibleFalse
            } IsVisible;

            [version(NTDDI_WIN10_RS1)] typedef[v1_enum] enum FallbackType { None = 0, Drop, Content } FallbackType;

            [version(NTDDI_WIN10_RS1), flags] typedef[v1_enum] enum BleedDirection {
                None = 0x0000,
                Left = 0x0001,
                Right = 0x0010,
                Up = 0x0100,
                Down = 0x1000,
                All = Left | Right | Up | Down
            } BleedDirection;

            [version(NTDDI_WIN10_RS1)] typedef[v1_enum] enum AssociatedInputs {
                Auto = 0,
                None,
            } AssociatedInputs;

            [version(NTDDI_WIN10_RS1)] typedef[v1_enum] enum TextStyle {
                Paragraph = 0,
                Heading,
            } TextStyle;

            declare
            {
                interface Windows.Foundation.Collections.IVector<IAdaptiveCardElement*>;
                interface Windows.Foundation.Collections.IVector<IAdaptiveActionElement*>;
                interface Windows.Foundation.Collections.IVector<AdaptiveColumn*>;
                interface Windows.Foundation.Collections.IVector<AdaptiveFact*>;
                interface Windows.Foundation.Collections.IVector<AdaptiveChoiceInput*>;
                interface Windows.Foundation.Collections.IVector<AdaptiveError*>;
                interface Windows.Foundation.Collections.IVector<AdaptiveWarning*>;
                interface Windows.Foundation.Collections.IObservableVector<IAdaptiveCardElement*>;
                interface Windows.Foundation.Collections.IObservableVector<AdaptiveColumn*>;
                interface Windows.Foundation.Collections.IVector<AdaptiveMediaSource*>;
                interface Windows.Foundation.Collections.IVector<AdaptiveRemoteResourceInformation*>;
                interface Windows.Foundation.Collections.IVector<AdaptiveToggleVisibilityTarget*>;
                interface Windows.Foundation.Collections.IVector<AdaptiveImage*>;
                interface Windows.Foundation.Collections.IVector<AdaptiveRequirement*>;
                interface Windows.Foundation.Collections.IVector<AdaptiveAuthCardButton*>;
            }

            interface IAdaptiveCardElement
            {
                ElementType ElementType { get; };
                String ElementTypeString { get; };

                HeightType Height;
                Spacing Spacing;
                Boolean Separator;
                String Id;
                Boolean IsVisible;
                FallbackType FallbackType;
                IAdaptiveCardElement FallbackContent;
                Windows.Data.Json.JsonObject AdditionalProperties;
                Windows.Foundation.Collections.IVector<AdaptiveRequirement> Requirements { get; };

                Windows.Data.Json.JsonObject ToJson();
            };

            runtimeclass AdaptiveRemoteResourceInformation
            {
                AdaptiveRemoteResourceInformation();

                String Url;
                String MimeType;
            };

            interface IAdaptiveElementWithRemoteResources
            {
                Windows.Foundation.Collections.IVectorView<AdaptiveRemoteResourceInformation> GetResourceInformation();
            };

            runtimeclass AdaptiveSeparator
            {
                AdaptiveSeparator();

                ForegroundColor Color;
                SeparatorThickness Thickness;
            };

            interface IAdaptiveTextElement
            {
                TextSize Size;
                TextWeight Weight;
                ForegroundColor Color;
                String Text;
                Boolean IsSubtle;
                String Language;
                FontType FontType;
            };

            runtimeclass AdaptiveTextBlock : IAdaptiveCardElement, IAdaptiveTextElement
            {
                AdaptiveTextBlock();

                Boolean Wrap;
                HAlignment HorizontalAlignment;
                UInt32 MaxLines;
                TextStyle Style;
            };

            [version(NTDDI_WIN10_RS1), uuid("0AC70C29-FA90-4C28-A6D1-A6EF58126085")] interface IAdaptiveInline {};

            runtimeclass AdaptiveTextRun : IAdaptiveInline, IAdaptiveTextElement
            {
                AdaptiveTextRun();

                Boolean Italic;
                Boolean Strikethrough;
                Boolean Highlight;
                Boolean Underline;
                IAdaptiveActionElement SelectAction;
            };

            runtimeclass AdaptiveRichTextBlock : IAdaptiveCardElement
            {
                AdaptiveRichTextBlock();

                HAlignment HorizontalAlignment;
                Windows.Foundation.Collections.IVector<IAdaptiveInline> Inlines { get; };
            };

            runtimeclass AdaptiveMediaSource
            {
                AdaptiveMediaSource();

                String MimeType;
                String Url;
            };

            runtimeclass AdaptiveMedia : IAdaptiveCardElement
            {
                AdaptiveMedia();

                String Poster;
                String AltText;

                Windows.Foundation.Collections.IVector<AdaptiveMediaSource> Sources { get; };
            };

            runtimeclass AdaptiveBackgroundImage
            {
                AdaptiveBackgroundImage();

                String Url;
                BackgroundImageFillMode FillMode;
                HAlignment HorizontalAlignment;
                VAlignment VerticalAlignment;
            };

            runtimeclass AdaptiveAuthCardButton
            {
                AdaptiveAuthCardButton();

                String Type;
                String Title;
                String Image;
                String Value;
            };

            runtimeclass AdaptiveTokenExchangeResource
            {
                AdaptiveTokenExchangeResource();

                String Id;
                String Uri;
                String ProviderId;
            };

            runtimeclass AdaptiveAuthentication
            {
                AdaptiveAuthentication();

                String Text;
                String ConnectionName;
                AdaptiveTokenExchangeResource TokenExchangeResource;
                Windows.Foundation.Collections.IVector<AdaptiveAuthCardButton> Buttons { get; };
            };

            runtimeclass AdaptiveRefresh
            {
                AdaptiveRefresh();

                IAdaptiveActionElement Action;
                Windows.Foundation.Collections.IVector<String> UserIds { get; };
            };

            runtimeclass AdaptiveCard
            {
                AdaptiveCard();

                Windows.Foundation.Collections.IVector<IAdaptiveCardElement> Body { get; };
                Windows.Foundation.Collections.IVector<IAdaptiveActionElement> Actions { get; };
                ElementType ElementType { get; };
                String Version;
                String FallbackText;
                AdaptiveBackgroundImage BackgroundImage;
                String Language;
                String Speak;
                ContainerStyle Style;
                IAdaptiveActionElement SelectAction;
                VerticalContentAlignment VerticalContentAlignment;
                HeightType Height;
                UInt32 MinHeight;
                AdaptiveRefresh Refresh;
                AdaptiveAuthentication Authentication;

                Windows.Data.Json.JsonObject ToJson();
                Windows.Foundation.Collections.IVectorView<AdaptiveRemoteResourceInformation> GetResourceInformation();

                static AdaptiveCardParseResult FromJson(Windows.Data.Json.JsonObject adaptiveJson);

                [method_name("FromJsonWithParserRegistration")] static AdaptiveCardParseResult FromJson(
                    Windows.Data.Json.JsonObject adaptiveJson,
                    AdaptiveElementParserRegistration elementRegistration,
                    AdaptiveActionParserRegistration actionRegistration);

                static AdaptiveCardParseResult FromJsonString(String adaptiveJson);

                [method_name("FromJsonStringWithParserRegistration")] static AdaptiveCardParseResult FromJsonString(
                    String adaptiveJson, AdaptiveElementParserRegistration elementRegistration, AdaptiveActionParserRegistration actionRegistration);
            };

            runtimeclass AdaptiveCardParseResult
            {
                AdaptiveCardParseResult();

                AdaptiveCard AdaptiveCard { get; };
                Windows.Foundation.Collections.IVector<AdaptiveError> Errors { get; };
                Windows.Foundation.Collections.IVector<AdaptiveWarning> Warnings { get; };
            };

            runtimeclass AdaptiveImage : IAdaptiveCardElement
            {
                AdaptiveImage();

                String Url;
                String BackgroundColor;
                ImageStyle Style;
                ImageSize Size;
                UInt32 PixelWidth;
                UInt32 PixelHeight;
                HAlignment HorizontalAlignment;
                String AltText;
                IAdaptiveActionElement SelectAction;
            };

            runtimeclass AdaptiveImageSet : IAdaptiveCardElement
            {
                AdaptiveImageSet();

                Windows.Foundation.Collections.IVector<AdaptiveImage> Images { get; };
                ImageSize ImageSize;
            };

            runtimeclass AdaptiveChoiceInput
            {
                AdaptiveChoiceInput();

                ElementType ElementType { get; };
                String Title;
                String Value;
            };

            runtimeclass AdaptiveChoiceSetInput : IAdaptiveInputElement, IAdaptiveCardElement
            {
                AdaptiveChoiceSetInput();

                String Value;
                Boolean IsMultiSelect;
                String Placeholder;
                Boolean Wrap;
                ChoiceSetStyle ChoiceSetStyle;
                Windows.Foundation.Collections.IVector<AdaptiveChoiceInput> Choices { get; };
            };

            runtimeclass AdaptiveDateInput : IAdaptiveInputElement, IAdaptiveCardElement
            {
                AdaptiveDateInput();

                String Max;
                String Min;
                String Placeholder;
                String Value;
            };

            runtimeclass AdaptiveNumberInput : IAdaptiveInputElement, IAdaptiveCardElement
            {
                AdaptiveNumberInput();

                Windows.Foundation.IReference<Double> Max;
                Windows.Foundation.IReference<Double> Min;
                String Placeholder;
                Windows.Foundation.IReference<Double> Value;
            };

            runtimeclass AdaptiveTextInput : IAdaptiveInputElement, IAdaptiveCardElement
            {
                AdaptiveTextInput();

                Boolean IsMultiline;
                UInt32 MaxLength;
                String Placeholder;
                String Value;
                TextInputStyle TextInputStyle;
                IAdaptiveActionElement InlineAction;
                String Regex;
            };

            runtimeclass AdaptiveTimeInput : IAdaptiveInputElement, IAdaptiveCardElement
            {
                AdaptiveTimeInput();

                String Max;
                String Min;
                String Placeholder;
                String Value;
            };

            runtimeclass AdaptiveToggleInput : IAdaptiveInputElement, IAdaptiveCardElement
            {
                AdaptiveToggleInput();

                String Title;
                Boolean Wrap;
                String Value;
                String ValueOff;
                String ValueOn;
            };

            interface IAdaptiveContainerBase
            {
                ContainerStyle Style;
                IAdaptiveActionElement SelectAction;
                Boolean Bleed;
                BleedDirection BleedDirection { get; };
                UInt32 MinHeight;
            };

            runtimeclass AdaptiveContainer : IAdaptiveContainerBase, IAdaptiveCardElement
            {
                AdaptiveContainer();

                VerticalContentAlignment VerticalContentAlignment;
                Windows.Foundation.Collections.IVector<IAdaptiveCardElement> Items { get; };
                AdaptiveBackgroundImage BackgroundImage;
                Windows.Foundation.IReference<Boolean> Rtl;
            };

            runtimeclass AdaptiveColumn : IAdaptiveContainerBase, IAdaptiveCardElement
            {
                AdaptiveColumn();

                String Width;
                UInt32 PixelWidth;
                VerticalContentAlignment VerticalContentAlignment;
                Windows.Foundation.Collections.IVector<IAdaptiveCardElement> Items { get; };
                AdaptiveBackgroundImage BackgroundImage;
                Windows.Foundation.IReference<Boolean> Rtl;
            };

            runtimeclass AdaptiveColumnSet : IAdaptiveContainerBase, IAdaptiveCardElement
            {
                AdaptiveColumnSet();

                Windows.Foundation.Collections.IVector<AdaptiveColumn> Columns { get; };
            };

            runtimeclass AdaptiveFact
            {
                AdaptiveFact();

                ElementType ElementType { get; };
                String Title;
                String Value;
                String Language;
            };

            runtimeclass AdaptiveFactSet : IAdaptiveCardElement
            {
                AdaptiveFactSet();

                Windows.Foundation.Collections.IVector<AdaptiveFact> Facts { get; };
            };

            runtimeclass AdaptiveActionSet : IAdaptiveCardElement
            {
                AdaptiveActionSet();

                Windows.Foundation.Collections.IVector<IAdaptiveActionElement> Actions { get; };
            };

            [default_interface] runtimeclass AdaptiveUnsupportedAction : IAdaptiveActionElement
            {
                AdaptiveUnsupportedAction();
            };

            [default_interface] runtimeclass AdaptiveUnsupportedElement : IAdaptiveCardElement
            {
                AdaptiveUnsupportedElement();
            };

            interface IAdaptiveActionElement
            {
                ActionType ActionType { get; };
                String ActionTypeString { get; };
                String Title;
                String Id;
                FallbackType FallbackType;
                IAdaptiveActionElement FallbackContent;
                String IconUrl;
                String Style;
                String Tooltip;
                Windows.Data.Json.JsonObject AdditionalProperties;
                Boolean IsEnabled;

                Windows.Data.Json.JsonObject ToJson();
            };

            runtimeclass AdaptiveOpenUrlAction : IAdaptiveActionElement
            {
                AdaptiveOpenUrlAction();

                Windows.Foundation.Uri Url;
            };

            runtimeclass AdaptiveShowCardAction : IAdaptiveActionElement
            {
                AdaptiveShowCardAction();

                AdaptiveCard Card;
            };

            runtimeclass AdaptiveSubmitAction : IAdaptiveActionElement
            {
                AdaptiveSubmitAction();

                Windows.Data.Json.JsonValue DataJson;
                AssociatedInputs AssociatedInputs;
            };

            runtimeclass AdaptiveExecuteAction : IAdaptiveActionElement
            {
                AdaptiveExecuteAction();

                Windows.Data.Json.JsonValue DataJson;
                AssociatedInputs AssociatedInputs;
                String Verb;
            };

            runtimeclass AdaptiveToggleVisibilityTarget
            {
                AdaptiveToggleVisibilityTarget();

                String ElementId;
                IsVisible IsVisible;
            };

            runtimeclass AdaptiveToggleVisibilityAction : IAdaptiveActionElement
            {
                AdaptiveToggleVisibilityAction();

                Windows.Foundation.Collections.IVector<AdaptiveToggleVisibilityTarget> TargetElements { get; };
            };

            runtimeclass AdaptiveRequirement
            {
                AdaptiveRequirement(String requirementName, String requirementversion);

                String Name;
                String Version;
            }

            runtimeclass AdaptiveFeatureRegistration
            {
                AdaptiveFeatureRegistration();

                void Set(String name, String version);
                String Get(String name);
                void Remove(String name);
            };

            interface IAdaptiveElementParser
            {
                IAdaptiveCardElement FromJson(Windows.Data.Json.JsonObject inputJson,
                                              AdaptiveElementParserRegistration elementParsers,
                                              AdaptiveActionParserRegistration actionParsers,
                                              Windows.Foundation.Collections.IVector<AdaptiveWarning> warnings);
            };

            runtimeclass AdaptiveElementParserRegistration
            {
                AdaptiveElementParserRegistration();

                void Set(String type, IAdaptiveElementParser parser);
                IAdaptiveElementParser Get(String type);
                void Remove(String type);
            };

            runtimeclass AdaptiveActionParserRegistration
            {
                AdaptiveActionParserRegistration();

                void Set(String type, IAdaptiveActionParser parser);
                IAdaptiveActionParser Get(String type);
                void Remove(String type);
            };

            interface IAdaptiveActionParser
            {
                IAdaptiveActionElement FromJson(Windows.Data.Json.JsonObject inputJson,
                                                AdaptiveElementParserRegistration elementParsers,
                                                AdaptiveActionParserRegistration actionParsers,
                                                Windows.Foundation.Collections.IVector<AdaptiveWarning> warnings);
            };

            interface IAdaptiveInputElement
            {
                Boolean IsRequired;
                String ErrorMessage;
                String Label;
            };

            [default_interface] runtimeclass AdaptiveTextBlockRenderer : IAdaptiveElementParser
            {
                AdaptiveTextBlockRenderer();
            };

            [default_interface] runtimeclass AdaptiveRichTextBlockRenderer : IAdaptiveElementParser
            {
                AdaptiveRichTextBlockRenderer();
            };

            [default_interface] runtimeclass AdaptiveImageRenderer : IAdaptiveElementParser
            {
                AdaptiveImageRenderer();
            };

            [default_interface] runtimeclass AdaptiveImageSetRenderer : IAdaptiveElementParser
            {
                AdaptiveImageSetRenderer();
            };

            [default_interface] runtimeclass AdaptiveContainerRenderer : IAdaptiveElementParser
            {
                AdaptiveContainerRenderer();
            };

            [default_interface] runtimeclass AdaptiveColumnRenderer : IAdaptiveElementParser
            {
                AdaptiveColumnRenderer();
            };

            [default_interface] runtimeclass AdaptiveColumnSetRenderer : IAdaptiveElementParser
            {
                AdaptiveColumnSetRenderer();
            };

            [default_interface] runtimeclass AdaptiveFactRenderer : IAdaptiveElementParser { AdaptiveFactRenderer(); };

            [default_interface] runtimeclass AdaptiveChoiceSetInputRenderer : IAdaptiveElementParser
            {
                AdaptiveChoiceSetInputRenderer();
            };

            [default_interface] runtimeclass AdaptiveDateInputRenderer : IAdaptiveElementParser
            {
                AdaptiveDateInputRenderer();
            };

            [default_interface] runtimeclass AdaptiveNumberInputRenderer : IAdaptiveElementParser
            {
                AdaptiveNumberInputRenderer();
            };

            [default_interface] runtimeclass AdaptiveTextInputRenderer : IAdaptiveElementParser
            {
                AdaptiveTextInputRenderer();
            };

            [default_interface] runtimeclass AdaptiveTimeInputRenderer : IAdaptiveElementParser
            {
                AdaptiveTimeInputRenderer();
            };

            [default_interface] runtimeclass AdaptiveToggleInputRenderer : IAdaptiveElementParser
            {
                AdaptiveToggleInputRenderer();
            };

            [default_interface] runtimeclass AdaptiveFactSetRenderer : IAdaptiveElementParser
            {
                AdaptiveFactSetRenderer();
            };

            [default_interface] runtimeclass AdaptiveMediaRenderer : IAdaptiveElementParser
            {
                AdaptiveMediaRenderer();
            };

            [default_interface] runtimeclass AdaptiveActionSetRenderer : IAdaptiveElementParser
            {
                AdaptiveActionSetRenderer();
            };

            [default_interface] runtimeclass AdaptiveOpenUrlActionRenderer : IAdaptiveElementParser
            {
                AdaptiveOpenUrlActionRenderer();
            };

            [default_interface] runtimeclass AdaptiveShowCardActionRenderer : IAdaptiveElementParser
            {
                AdaptiveShowCardActionRenderer();
            };

            [default_interface] runtimeclass AdaptiveSubmitActionRenderer : IAdaptiveElementParser
            {
                AdaptiveSubmitActionRenderer();
            };

            [default_interface] runtimeclass AdaptiveExecuteActionRenderer : IAdaptiveElementParser
            {
                AdaptiveExecuteActionRenderer();
            };

            [default_interface] runtimeclass AdaptiveToggleVisibilityActionRenderer : IAdaptiveElementParser
            {
                AdaptiveToggleVisibilityActionRenderer();
            };

            runtimeclass AdaptiveError
            {
                AdaptiveError(ErrorStatusCode statusCode, String message);

                ErrorStatusCode StatusCode;
                String Message;
            };

            runtimeclass AdaptiveWarning
            {
                AdaptiveWarning(WarningStatusCode statusCode, String message);

                WarningStatusCode StatusCode;
                String Message;
            };
        }
    }
}
